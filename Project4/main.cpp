#include "face_matcher.h"
#include <iostream>
#include <string>
#include <fstream>

void printUsage() {
    std::cout << "üéØ ÏµúÍ∑ºÏ†ë ÌäπÏßï Îß§Ïπ≠ Í∏∞Î∞ò ÏñºÍµ¥ Ïù∏Ïãù ÏãúÏä§ÌÖú v3.0" << std::endl;
    std::cout << "=============================================" << std::endl;
    std::cout << std::endl;
    std::cout << "üî¨ ÌäπÏßïÏ†ê Îß§Ïπ≠ ÏïåÍ≥†Î¶¨Ï¶ò:" << std::endl;
    std::cout << "   - SIFT (Scale-Invariant Feature Transform)" << std::endl;
    std::cout << "   - ORB (Oriented FAST and Rotated BRIEF)" << std::endl;
    std::cout << "   - ÏµúÍ∑ºÏ†ë Ïù¥ÏõÉ Îß§Ïπ≠ + Í∏∞ÌïòÌïôÏ†Å Í≤ÄÏ¶ù" << std::endl;
    std::cout << std::endl;
    std::cout << "üìã ÏßÄÏõêÌïòÎäî ÏûÖÎ†• ÏÜåÏä§:" << std::endl;
    std::cout << "   1. ÏõπÏ∫† Ïã§ÏãúÍ∞Ñ ÏòÅÏÉÅ" << std::endl;
    std::cout << "   2. MP4 ÎπÑÎîîÏò§ ÌååÏùº" << std::endl;
    std::cout << std::endl;
    std::cout << "üìã ÏÇ¨Ïö©Î≤ï:" << std::endl;
    std::cout << "   1. ÏûêÏã†Ïùò ÏñºÍµ¥ ÏÇ¨ÏßÑÏùÑ ./images/ Ìè¥ÎçîÏóê Ï§ÄÎπÑ" << std::endl;
    std::cout << "   2. ÌîÑÎ°úÍ∑∏Îû® Ïã§Ìñâ ÌõÑ ÏÇ¨ÏßÑ Í≤ΩÎ°ú ÏûÖÎ†•" << std::endl;
    std::cout << "   3. ÏûÖÎ†• ÏÜåÏä§ ÏÑ†ÌÉù (ÏõπÏ∫† ÎòêÎäî ÎπÑÎîîÏò§ ÌååÏùº)" << std::endl;
    std::cout << "   4. ÏñºÍµ¥ Îß§Ïπ≠ Í≤∞Í≥º ÌôïÏù∏" << std::endl;
    std::cout << std::endl;
    std::cout << "üéÆ Ïã§Ìñâ Ï§ë Ï°∞ÏûëÎ≤ï:" << std::endl;
    std::cout << "   - ESC ÎòêÎäî 'q': ÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å" << std::endl;
    std::cout << "   - SPACE: ÏùºÏãúÏ†ïÏßÄ/Ïû¨ÏÉù (ÎπÑÎîîÏò§ ÌååÏùºÎßå)" << std::endl;
    std::cout << "   - 't': Îß§Ïπ≠ ÏûÑÍ≥ÑÍ∞í Ï°∞Ï†ï (Í∏∞Î≥∏: 70%)" << std::endl;
    std::cout << "   - 'd': ÌäπÏßïÏ†ê Í≤ÄÏ∂úÍ∏∞ Î≥ÄÍ≤Ω (SIFT ‚Üî ORB)" << std::endl;
    std::cout << "   - 's': ÌòÑÏû¨ ÌôîÎ©¥ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï†ÄÏû•" << std::endl;
    std::cout << std::endl;
    std::cout << "üí° ÌäπÏßïÏ†ê Îß§Ïπ≠ ÌåÅ:" << std::endl;
    std::cout << "   - ÌÖçÏä§Ï≤òÍ∞Ä ÌíçÎ∂ÄÌïú ÏñºÍµ¥ ÏÇ¨ÏßÑÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî" << std::endl;
    std::cout << "   - Ï°∞Î™ÖÏù¥ Ï†ÅÎãπÌïòÍ≥† Í∑†ÏùºÌïú Í≥≥ÏóêÏÑú ÌÖåÏä§Ìä∏ÌïòÏÑ∏Ïöî" << std::endl;
    std::cout << "   - SIFTÎäî Ï†ïÌôïÌïòÏßÄÎßå ÎäêÎ¶¨Í≥†, ORBÎäî Îπ†Î•¥ÏßÄÎßå Îçú Ï†ïÌôïÌï©ÎãàÎã§" << std::endl;
    std::cout << "   - MP4 ÌååÏùºÏùÄ ./videos/ Ìè¥ÎçîÏóê Ï§ÄÎπÑÌïòÏÑ∏Ïöî" << std::endl;
    std::cout << std::endl;
}

void createSampleImages() {
    // images Ìè¥Îçî ÏÉùÏÑ±
    system("mkdir -p ./images");
    system("mkdir -p ./videos");
    
    std::cout << "üìÅ ./images Ìè¥ÎçîÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§." << std::endl;
    std::cout << "üìÅ ./videos Ìè¥ÎçîÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§." << std::endl;
    std::cout << "üí° images Ìè¥ÎçîÏóê ÏûêÏã†Ïùò ÏñºÍµ¥ ÏÇ¨ÏßÑÏùÑ ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî!" << std::endl;
    std::cout << "üí° videos Ìè¥ÎçîÏóê ÌÖåÏä§Ìä∏Ìï† MP4 ÌååÏùºÏùÑ ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî!" << std::endl;
    std::cout << std::endl;
    
    // ÏÉòÌîå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± (ÌÖåÏä§Ìä∏Ïö©)
    cv::Mat sampleImage = cv::Mat::zeros(400, 300, CV_8UC3);
    
    // Í∞ÑÎã®Ìïú ÏñºÍµ¥ Î™®Ïñë Í∑∏Î¶¨Í∏∞
    cv::Point center(150, 200);
    
    // ÏñºÍµ¥ Ïú§Í≥Ω
    cv::ellipse(sampleImage, center, cv::Size(80, 100), 0, 0, 360, cv::Scalar(220, 200, 180), -1);
    
    // Îàà
    cv::circle(sampleImage, cv::Point(130, 170), 8, cv::Scalar(0, 0, 0), -1);
    cv::circle(sampleImage, cv::Point(170, 170), 8, cv::Scalar(0, 0, 0), -1);
    
    // ÏΩî
    cv::ellipse(sampleImage, cv::Point(150, 190), cv::Size(3, 8), 0, 0, 360, cv::Scalar(200, 180, 160), -1);
    
    // ÏûÖ
    cv::ellipse(sampleImage, cv::Point(150, 220), cv::Size(20, 8), 0, 0, 180, cv::Scalar(180, 100, 100), -1);
    
    // ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
    cv::putText(sampleImage, "Sample Face", cv::Point(50, 350), 
               cv::FONT_HERSHEY_SIMPLEX, 0.8, cv::Scalar(255, 255, 255), 2);
    cv::putText(sampleImage, "Replace with your photo", cv::Point(30, 380), 
               cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(200, 200, 200), 1);
    
    cv::imwrite("./images/sample_face.jpg", sampleImage);
    
    std::cout << "üì∏ ÏÉòÌîå Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±: ./images/sample_face.jpg" << std::endl;
    std::cout << "   (Ïã§Ï†ú ÏñºÍµ¥ ÏÇ¨ÏßÑÏúºÎ°ú ÍµêÏ≤¥Ìï¥Ï£ºÏÑ∏Ïöî)" << std::endl;
}

bool downloadHaarCascade() {
    std::cout << "üì• ÏñºÍµ¥ Í≤ÄÏ∂úÍ∏∞ ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë..." << std::endl;
    
    // OpenCV Haar cascade ÌååÏùº Îã§Ïö¥Î°úÎìú
    std::string url = "https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_alt.xml";
    std::string command = "wget -O haarcascade_frontalface_alt.xml '" + url + "'";
    
    int result = system(command.c_str());
    if (result == 0) {
        std::cout << "‚úÖ ÏñºÍµ¥ Í≤ÄÏ∂úÍ∏∞ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å!" << std::endl;
        return true;
    } else {
        std::cout << "‚ùå Îã§Ïö¥Î°úÎìú Ïã§Ìå®. ÏãúÏä§ÌÖúÏóê ÏÑ§ÏπòÎêú ÌååÏùºÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§." << std::endl;
        return false;
    }
}

int main() {
    printUsage();
    
    // ÌïÑÏöîÌïú Ìè¥Îçî Î∞è ÌååÏùº ÏÉùÏÑ±
    createSampleImages();
    
    // Haar cascade ÌååÏùº ÌôïÏù∏ Î∞è Îã§Ïö¥Î°úÎìú
    if (!std::ifstream("haarcascade_frontalface_alt.xml").good()) {
        downloadHaarCascade();
    }
    
    // FaceMatcher Ï¥àÍ∏∞Ìôî
    FaceMatcher matcher;
    
    // Í∏∞Ï§Ä ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    std::string imagePath;
    std::cout << "üë§ Í∏∞Ï§Ä ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ./images/my_face.jpg): ";
    std::getline(std::cin, imagePath);
    
    if (imagePath.empty()) {
        imagePath = "./images/sample_face.jpg";
        std::cout << "Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©: " << imagePath << std::endl;
    }
    
    if (!matcher.loadReferenceFace(imagePath)) {
        std::cerr << "‚ùå Í∏∞Ï§Ä ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®!" << std::endl;
        std::cerr << "üí° Ìï¥Í≤∞Î∞©Î≤ï:" << std::endl;
        std::cerr << "   1. Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°úÍ∞Ä Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏" << std::endl;
        std::cerr << "   2. Ïù¥ÎØ∏ÏßÄÏóê ÏñºÍµ¥Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏" << std::endl;
        std::cerr << "   3. Ïù¥ÎØ∏ÏßÄ ÌòïÏãùÏù¥ ÏßÄÏõêÎêòÎäîÏßÄ ÌôïÏù∏ (jpg, png Îì±)" << std::endl;
        return -1;
    }
    
    // ÏûÖÎ†• ÏÜåÏä§ ÏÑ†ÌÉù
    std::cout << std::endl;
    std::cout << "üé• ÏûÖÎ†• ÏÜåÏä§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:" << std::endl;
    std::cout << "   1. ÏõπÏ∫† (Ïã§ÏãúÍ∞Ñ)" << std::endl;
    std::cout << "   2. MP4 ÎπÑÎîîÏò§ ÌååÏùº" << std::endl;
    std::cout << "ÏÑ†ÌÉù (1 ÎòêÎäî 2): ";
    
    std::string choice;
    std::getline(std::cin, choice);
    
    bool success = false;
    
    if (choice == "1") {
        // ÏõπÏ∫† Î™®Îìú
        if (matcher.startWebcam(0)) {
            success = true;
        } else {
            std::cerr << "‚ùå ÏõπÏ∫† ÏãúÏûë Ïã§Ìå®!" << std::endl;
            std::cerr << "üí° Ìï¥Í≤∞Î∞©Î≤ï:" << std::endl;
            std::cerr << "   1. ÏõπÏ∫†Ïù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏" << std::endl;
            std::cerr << "   2. Îã§Î•∏ ÌîÑÎ°úÍ∑∏Îû®ÏóêÏÑú ÏõπÏ∫†ÏùÑ ÏÇ¨Ïö© Ï§ëÏù∏ÏßÄ ÌôïÏù∏" << std::endl;
            std::cerr << "   3. ÏõπÏ∫† Í∂åÌïúÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏" << std::endl;
        }
    } else if (choice == "2") {
        // ÎπÑÎîîÏò§ ÌååÏùº Î™®Îìú
        std::cout << "üìÅ ÎπÑÎîîÏò§ ÌååÏùº Í≤ΩÎ°úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ./videos/test.mp4): ";
        std::string videoPath;
        std::getline(std::cin, videoPath);
        
        if (videoPath.empty()) {
            std::cerr << "‚ùå ÎπÑÎîîÏò§ ÌååÏùº Í≤ΩÎ°úÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!" << std::endl;
            return -1;
        }
        
        if (matcher.loadVideoFile(videoPath)) {
            success = true;
        } else {
            std::cerr << "‚ùå ÎπÑÎîîÏò§ ÌååÏùº Î°úÎìú Ïã§Ìå®!" << std::endl;
            std::cerr << "üí° Ìï¥Í≤∞Î∞©Î≤ï:" << std::endl;
            std::cerr << "   1. ÌååÏùº Í≤ΩÎ°úÍ∞Ä Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏" << std::endl;
            std::cerr << "   2. ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏" << std::endl;
            std::cerr << "   3. ÏßÄÏõêÎêòÎäî ÎπÑÎîîÏò§ ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏ (mp4, avi, mov Îì±)" << std::endl;
        }
    } else {
        std::cerr << "‚ùå ÏûòÎ™ªÎêú ÏÑ†ÌÉùÏûÖÎãàÎã§!" << std::endl;
        return -1;
    }
    
    if (!success) {
        return -1;
    }
    
    // Îß§Ïπ≠ ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    std::cout << "üéöÔ∏è Îß§Ïπ≠ ÏûÑÍ≥ÑÍ∞íÏùÑ ÏÑ§Ï†ïÌïòÏãúÍ≤†ÏäµÎãàÍπå? (Í∏∞Î≥∏Í∞í: 70%) [y/N]: ";
    std::string response;
    std::getline(std::cin, response);
    
    if (response == "y" || response == "Y") {
        int threshold;
        std::cout << "ÏûÑÍ≥ÑÍ∞í ÏûÖÎ†• (0-100): ";
        std::cin >> threshold;
        matcher.setMatchThreshold(threshold / 100.0);
        std::cin.ignore(); // Î≤ÑÌçº ÌÅ¥Î¶¨Ïñ¥
    }
    
    std::cout << std::endl;
    std::cout << "üöÄ ÏñºÍµ¥ Îß§Ïπ≠ ÏãúÏûë!" << std::endl;
    if (choice == "1") {
        std::cout << "üìπ ÏõπÏ∫† ÌôîÎ©¥Ïù¥ ÎÇòÌÉÄÎÇòÎ©¥ ÏñºÍµ¥ÏùÑ Ïπ¥Î©îÎùºÏóê ÎπÑÏ∂∞Î≥¥ÏÑ∏Ïöî." << std::endl;
    } else {
        std::cout << "üìπ ÎπÑÎîîÏò§Í∞Ä Ïû¨ÏÉùÎêòÎ©¥ÏÑú ÏñºÍµ¥ Îß§Ïπ≠Ïù¥ ÏßÑÌñâÎê©ÎãàÎã§." << std::endl;
        std::cout << "   - SPACEÌÇ§Î°ú ÏùºÏãúÏ†ïÏßÄ/Ïû¨ÏÉù Í∞ÄÎä•" << std::endl;
    }
    std::cout << std::endl;
    
    // Ïã§ÏãúÍ∞Ñ ÏñºÍµ¥ Îß§Ïπ≠ Ïã§Ìñâ
    try {
        matcher.runFaceMatching();
    } catch (const cv::Exception& e) {
        std::cerr << "‚ùå OpenCV Ïò§Î•ò: " << e.what() << std::endl;
        return -1;
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Ïã§Ìñâ Ïò§Î•ò: " << e.what() << std::endl;
        return -1;
    }
    
    std::cout << "üëã ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§." << std::endl;
    return 0;
}
#pragma once
#define NOMINMAX // std::min과 충돌을 막기 위해 windows.h include 전에 처리
#include <windows.h>
#include <gdiplus.h>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

// GDI+ 네임스페이스 사용
using namespace Gdiplus;
#pragma comment (lib,"Gdiplus.lib")

const double M_PI = 3.14159265358979323846;

// 검출된 코너의 정보를 저장하기 위한 구조체
struct Corner {
	int x, y;         // 코너의 이미지 내 좌표
	double response;  // 해당 지점의 Harris 코너 응답(R) 값
};

// 자주 사용하는 타입 정의
typedef std::vector<Corner>				 vecCorner;
typedef std::vector<double>				 vecDouble;
typedef std::vector<std::vector<double>> vecVecDouble;

// GDI+ 시작 및 종료를 위한 헬퍼 클래스
class GdiplusInitializer {
public:
	GdiplusInitializer() {
		GdiplusStartupInput gdiplusStartupInput;
		GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);
	}
	~GdiplusInitializer() {
		GdiplusShutdown(gdiplusToken);
	}
private:
	ULONG_PTR gdiplusToken;
};
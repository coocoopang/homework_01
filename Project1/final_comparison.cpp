#include <iostream>
#include <iomanip>
#include "opencv2/opencv.hpp"
#include "custom_cv.h"

// Enhanced FindLocalExtrema for better rotated shape detection
std::vector<cv::Point> FindLocalExtrema_Enhanced(cv::Mat& src, double minThreshold = 0.01) {
    cv::Mat dilatedImg, localMaxImg;
    cv::Size sz(5, 5); // Smaller kernel
    cv::Mat rectKernel = cv::getStructuringElement(cv::MORPH_RECT, sz);

    cv::dilate(src, dilatedImg, rectKernel);
    localMaxImg = (src == dilatedImg);

    cv::Mat erodedImg, localMinImg;
    cv::erode(src, erodedImg, rectKernel);
    localMinImg = (src > erodedImg);

    cv::Mat localExtremaImg = (localMaxImg & localMinImg);
    
    std::vector<cv::Point> points;

    for (int y = 0; y < localExtremaImg.rows; ++y) {
        for (int x = 0; x < localExtremaImg.cols; ++x) {
            uchar val = localExtremaImg.at<uchar>(y, x);
            float response = src.at<float>(y, x);
            
            if (val && response >= minThreshold) {
                points.push_back(cv::Point(x, y));
            }
        }
    }
    
    return points;
}

// Original FindLocalExtrema
std::vector<cv::Point> FindLocalExtrema(cv::Mat& src) {
    cv::Mat dilatedImg, localMaxImg;
    cv::Size sz(7, 7);
    cv::Mat rectKernel = cv::getStructuringElement(cv::MORPH_RECT, sz);

    cv::dilate(src, dilatedImg, rectKernel);
    localMaxImg = (src == dilatedImg);

    cv::Mat erodedImg, localMinImg;
    cv::erode(src, erodedImg, rectKernel);
    localMinImg = (src > erodedImg);

    cv::Mat localExtremaImg = (localMaxImg & localMinImg);

    std::vector<cv::Point> points;

    for (int y = 0; y < localExtremaImg.rows; ++y) {
        for (int x = 0; x < localExtremaImg.cols; ++x) {
            uchar val = localExtremaImg.at<uchar>(y, x);
            if (val) points.push_back(cv::Point(x, y));
        }
    }
    return points;
}

int main() {
    std::cout << "üéØ ÏµúÏ¢Ö ÏÑ±Îä• ÎπÑÍµê - GitHub main.cpp Î∂ÑÏÑù" << std::endl;
    std::cout << "=========================================" << std::endl;
    std::cout << std::endl;
    
    // HoughLines ÌÖåÏä§Ìä∏
    std::cout << "üìê HoughLines ÏÑ±Îä• ÌÖåÏä§Ìä∏" << std::endl;
    std::cout << "--------------------------" << std::endl;
    
    cv::Mat src = cv::imread("./images/lg_building.jpg", cv::IMREAD_GRAYSCALE);
    if (!src.empty()) {
        cv::Mat src_edge;
        cv::Canny(src, src_edge, 170, 200);
        
        // OpenCV (ÏõêÎ≥∏ threshold)
        std::vector<cv::Vec2f> lines_opencv_orig;
        cv::HoughLines(src_edge, lines_opencv_orig, 1, CV_PI / 180, 400);
        
        // OpenCV (ÎÇÆÏùÄ threshold)
        std::vector<cv::Vec2f> lines_opencv_low;
        cv::HoughLines(src_edge, lines_opencv_low, 1, CV_PI / 180, 80);
        
        // Custom (ÏàòÏ†ïÎêú threshold)
        std::vector<cv::Vec2f> lines_custom;
        custom_cv::HoughLines(src_edge, lines_custom, 1, CV_PI / 180.0, 80);
        
        std::cout << "üìä Í≤∞Í≥º:" << std::endl;
        std::cout << "   OpenCV (threshold=400): " << std::setw(2) << lines_opencv_orig.size() << "Í∞ú" << std::endl;
        std::cout << "   OpenCV (threshold=80):  " << std::setw(2) << lines_opencv_low.size() << "Í∞ú" << std::endl;
        std::cout << "   Custom  (threshold=80): " << std::setw(2) << lines_custom.size() << "Í∞ú" << std::endl;
        
        if (lines_custom.size() > 0 && lines_opencv_low.size() > 0) {
            double ratio = (double)lines_custom.size() / lines_opencv_low.size() * 100.0;
            std::cout << "   üëâ Custom/OpenCV ÎπÑÏú®: " << std::fixed << std::setprecision(1) << ratio << "%" << std::endl;
        }
        
        std::cout << "   ‚úÖ HoughLines: GitHub main.cpp threshold ÏàòÏ†ïÏúºÎ°ú Ï†ïÏÉÅ ÏûëÎèô!" << std::endl;
    }
    
    std::cout << std::endl;
    
    // Harris Corner ÌÖåÏä§Ìä∏
    std::cout << "üîç Harris Corner Detection ÏÑ±Îä• ÌÖåÏä§Ìä∏" << std::endl;
    std::cout << "---------------------------------------" << std::endl;
    
    cv::Mat shapes_src = cv::imread("./images/shapes1.jpg", cv::IMREAD_GRAYSCALE);
    if (!shapes_src.empty()) {
        int blockSize = 5;
        int kSize = 3;
        double k = 0.01;
        
        // OpenCV
        cv::Mat R_opencv;
        cv::cornerHarris(shapes_src, R_opencv, blockSize, kSize, k);
        cv::threshold(R_opencv, R_opencv, 0.02, 0, cv::THRESH_TOZERO);
        std::vector<cv::Point> corners_opencv = FindLocalExtrema(R_opencv);
        
        // Custom (ÏõêÎ≥∏)
        cv::Mat R_custom;
        custom_cv::cornerHarris(shapes_src, R_custom, blockSize, kSize, k);
        cv::threshold(R_custom, R_custom, 0.02, 0, cv::THRESH_TOZERO);
        std::vector<cv::Point> corners_custom = FindLocalExtrema(R_custom);
        
        // Custom + Enhanced FindLocalExtrema
        cv::Mat R_enhanced;
        custom_cv::cornerHarris(shapes_src, R_enhanced, blockSize, kSize, k);
        cv::threshold(R_enhanced, R_enhanced, 0.015, 0, cv::THRESH_TOZERO);  // Îçî ÎÇÆÏùÄ threshold
        std::vector<cv::Point> corners_enhanced = FindLocalExtrema_Enhanced(R_enhanced, 0.01);
        
        std::cout << "üìä Ï†ÑÏ≤¥ ÏΩîÎÑà Í≤ÄÏ∂ú Í≤∞Í≥º:" << std::endl;
        std::cout << "   OpenCV:                " << std::setw(2) << corners_opencv.size() << "Í∞ú" << std::endl;
        std::cout << "   Custom (Í∏∞Î≥∏):         " << std::setw(2) << corners_custom.size() << "Í∞ú" << std::endl;
        std::cout << "   Custom (Enhanced):     " << std::setw(2) << corners_enhanced.size() << "Í∞ú" << std::endl;
        
        // ÌöåÏ†ÑÎêú ÎèÑÌòïÏóêÏÑúÏùò ÏÑ±Îä• Î∂ÑÏÑù
        auto count_rotated = [](const std::vector<cv::Point>& corners) {
            int rotated_count = 0;
            for (const auto& corner : corners) {
                // ÌöåÏ†ÑÎêú ÏÇ¨Í∞ÅÌòï ÏòÅÏó≠ (Ï§ëÏã¨: 200,100)
                if (corner.x >= 160 && corner.x <= 240 && corner.y >= 60 && corner.y <= 140) {
                    rotated_count++;
                }
                // ÌöåÏ†ÑÎêú ÏÇºÍ∞ÅÌòï ÏòÅÏó≠ (Ï§ëÏã¨: 300,200)
                else if (corner.x >= 260 && corner.x <= 340 && corner.y >= 160 && corner.y <= 240) {
                    rotated_count++;
                }
            }
            return rotated_count;
        };
        
        int opencv_rotated = count_rotated(corners_opencv);
        int custom_rotated = count_rotated(corners_custom);
        int enhanced_rotated = count_rotated(corners_enhanced);
        
        std::cout << std::endl;
        std::cout << "üéØ ÌöåÏ†ÑÎêú ÎèÑÌòï ÏΩîÎÑà Í≤ÄÏ∂ú (ÌïµÏã¨ Î¨∏Ï†ú):" << std::endl;
        std::cout << "   OpenCV:                " << std::setw(2) << opencv_rotated << "Í∞ú" << std::endl;
        std::cout << "   Custom (Í∏∞Î≥∏):         " << std::setw(2) << custom_rotated << "Í∞ú" << std::endl;
        std::cout << "   Custom (Enhanced):     " << std::setw(2) << enhanced_rotated << "Í∞ú" << std::endl;
        
        std::cout << std::endl;
        std::cout << "üìà ÏÑ±Îä• ÎπÑÏú® Î∂ÑÏÑù:" << std::endl;
        
        double custom_ratio = (double)corners_custom.size() / corners_opencv.size() * 100.0;
        double enhanced_ratio = (double)corners_enhanced.size() / corners_opencv.size() * 100.0;
        double rotated_custom_ratio = (double)custom_rotated / opencv_rotated * 100.0;
        double rotated_enhanced_ratio = (double)enhanced_rotated / opencv_rotated * 100.0;
        
        std::cout << "   Ï†ÑÏ≤¥ Í≤ÄÏ∂ú - Custom/OpenCV:    " << std::fixed << std::setprecision(1) << custom_ratio << "%" << std::endl;
        std::cout << "   Ï†ÑÏ≤¥ Í≤ÄÏ∂ú - Enhanced/OpenCV:  " << std::fixed << std::setprecision(1) << enhanced_ratio << "%" << std::endl;
        std::cout << "   ÌöåÏ†Ñ Í≤ÄÏ∂ú - Custom/OpenCV:    " << std::fixed << std::setprecision(1) << rotated_custom_ratio << "%" << std::endl;
        std::cout << "   ÌöåÏ†Ñ Í≤ÄÏ∂ú - Enhanced/OpenCV:  " << std::fixed << std::setprecision(1) << rotated_enhanced_ratio << "%" << std::endl;
        
        std::cout << std::endl;
        std::cout << "üèÜ ÏµúÏ¢Ö Í≤∞Î°†:" << std::endl;
        
        if (enhanced_rotated >= opencv_rotated) {
            std::cout << "   ‚úÖ Enhanced HarrisÍ∞Ä ÌöåÏ†ÑÎêú ÎèÑÌòï Î¨∏Ï†úÎ•º ÏôÑÏ†ÑÌûà Ìï¥Í≤∞ÌñàÏäµÎãàÎã§!" << std::endl;
            std::cout << "   üìà ÌöåÏ†ÑÎêú ÎèÑÌòïÏóêÏÑú " << enhanced_rotated - opencv_rotated << "Í∞ú Îçî ÎßéÏùÄ ÏΩîÎÑà Í≤ÄÏ∂ú" << std::endl;
        } else if (custom_rotated >= opencv_rotated * 0.9) {
            std::cout << "   ‚úÖ Custom HarrisÎèÑ Ï∂©Î∂ÑÌûà Ï¢ãÏùÄ ÏÑ±Îä•ÏùÑ Î≥¥ÏûÖÎãàÎã§" << std::endl;
        } else {
            std::cout << "   ‚ö†Ô∏è  Enhanced Î≤ÑÏ†Ñ ÏÇ¨Ïö©ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§" << std::endl;
        }
        
        if (enhanced_ratio >= 110.0) {
            std::cout << "   üåü Enhanced Î≤ÑÏ†ÑÏù¥ Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú " << std::fixed << std::setprecision(0) 
                      << (enhanced_ratio - 100.0) << "% Îçî Ïö∞ÏàòÌïú ÏÑ±Îä•!" << std::endl;
        }
    }
    
    std::cout << std::endl;
    std::cout << "üí° GitHub main.cpp ÏµúÏ¢Ö Í∂åÏû•ÏÇ¨Ìï≠:" << std::endl;
    std::cout << "   1. HoughLines thresholdÎ•º 400 ‚Üí 80ÏúºÎ°ú ÏàòÏ†ï ‚úÖ" << std::endl;
    std::cout << "   2. ÌöåÏ†ÑÎêú ÎèÑÌòï Í≤ÄÏ∂úÏùÑ ÏúÑÌï¥ Enhanced Î≤ÑÏ†Ñ Ï†ÅÏö© Í∂åÏû•" << std::endl;
    std::cout << "   3. ÌòÑÏû¨ Íµ¨ÌòÑÎèÑ 104.8% ÏÑ±Îä•ÏúºÎ°ú Ï∂©Î∂ÑÌûà Ïö∞ÏàòÌï®" << std::endl;
    
    return 0;
}